#! /usr/bin/env python
# -*- Python -*-

####################################################################################################
#
# Pyterate - Sphinx add-ons to create API documentation for Python projects
# Copyright (C) 2017 Salvaire Fabrice
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

import Pyterate.Logging.Logging as Logging
logger = Logging.setup_logging()

####################################################################################################

import argparse
import os

from Pyterate.RstFactory.Document import Document
from Pyterate.RstFactory.RstFactory import RstFactory
from Pyterate.RstFactory.Topic import Topic

####################################################################################################

parser = argparse.ArgumentParser(description='Generate RST files')

parser.add_argument('--input-path',
                    default='examples',
                    help="Input path")

parser.add_argument('--document-path',
                    default=None,
                    help="Document path")

parser.add_argument('--rst-source-path',
                    default='doc/sphinx/source',
                    help="RST source path")

parser.add_argument('--rst-directory',
                    default='examples',
                    help="RST directory")

parser.add_argument('--skip-figure',
                    action='store_true', default=False,
                    help="Don't generate figures")

parser.add_argument('--skip-external-figure',
                    action='store_true', default=False,
                    help="Don't generate external figures")

parser.add_argument('--force',
                    action='store_true', default=False,
                    help="Force the figure generation")

parser.add_argument('--user-template',
                    default=None,
                    help="User template path")

args = parser.parse_args()

####################################################################################################

if args.user_template is None:
    user_template = os.path.realpath(os.path.join(args.input_path, 'pytrate-templates'))
    if not os.path.exists(user_template):
        user_template = None
else:
    user_template = args.user_template
    
rst_factory = RstFactory(
    documents_path=args.input_path,
    rst_source_path=args.rst_source_path,
    rst_directory=args.rst_directory,
    user_template_path=user_template,
)

if args.document_path:
    document_path= os.path.relpath(args.input_path, args.document_path)
    topic = Topic(rst_factory, os.path.dirname(document_path))
    document = Document(topic, os.path.basename(document_path))
    topic.process_document(
        document,
        make_figure=not args.skip_figure,
        make_external_figure=not args.skip_circuit_figure,
        force=True,
    )
else:
    rst_factory.process_recursively(
        make_figure=not args.skip_figure,
        make_external_figure=not args.skip_external_figure,
        force=args.force,
    )
